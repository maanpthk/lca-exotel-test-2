// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders bootstrap template correctly 1`] = `
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "Public": {
      "Fn::Equals": [
        {
          "Ref": "Public",
        },
        "PUBLIC",
      ],
    },
  },
  "Description": "Bootstrap bucket for QnABot assets",
  "Mappings": {},
  "Outputs": {
    "Bucket": {
      "Value": {
        "Ref": "Bucket",
      },
    },
    "Prefix": {
      "Value": "artifacts/aws-ai-qna-bot",
    },
  },
  "Parameters": {
    "Public": {
      "Default": "PRIVATE",
      "Type": "String",
    },
  },
  "Resources": {
    "Bucket": {
      "DependsOn": [
        "devBootStrapBucketAccessLogs",
        "devBootStrapBucketAccessLogsPolicy",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "S3_BUCKET_NO_PUBLIC_RW_ACL",
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "NoncurrentVersionExpirationInDays": 1,
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "devBootStrapBucketAccessLogs",
          },
          "LogFilePrefix": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "devBootStrapBucketAccessLogs",
                },
                "/",
              ],
            ],
          },
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "CFNLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "/** *******************************************************************************************************************
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                                                *
 *                                                                                                                    *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance    *
 *  with the License. A copy of the License is located at                                                             *
 *                                                                                                                    *
 *      http://www.apache.org/licenses/                                                                               *
 *                                                                                                                    *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *
 *  and limitations under the License.                                                                                *
 ******************************************************************************************************************** */

const { S3Client, DeleteObjectsCommand, ListObjectVersionsCommand } = require('@aws-sdk/client-s3');

const region = process.env.AWS_REGION;
const s3Client = new S3Client({
    customUserAgent: [
        [\`AWSSOLUTION/\${process.env.SOLUTION_ID}/\${process.env.SOLUTION_VERSION}\`],
        [\`AWSSOLUTION-CAPABILITY/\${process.env.SOLUTION_ID}-C023/\${process.env.SOLUTION_VERSION}\`],
    ],
    region,
});

const SUCCESS = 'SUCCESS';
const FAILED = 'FAILED';
const https = require('https');
const { URL } = require('url');

function send(event, context, responseStatus, responseData, physicalResourceId, noEcho) {
    return new Promise((resolve, reject) => {
        const responseBody = JSON.stringify({
            Status: responseStatus,
            Reason: \`See the details in CloudWatch Log Stream: \${context.logStreamName}\`,
            PhysicalResourceId: physicalResourceId || context.logStreamName,
            StackId: event.StackId,
            RequestId: event.RequestId,
            LogicalResourceId: event.LogicalResourceId,
            NoEcho: noEcho || false,
            Data: responseData,
        });

        console.log('Response body:\\n', responseBody);

        const parsedUrl = new URL(event.ResponseURL);

        const options = {
            hostname: parsedUrl.hostname,
            port: 443,
            path: parsedUrl.pathname + parsedUrl.search,
            method: 'PUT',
            headers: {
                'content-type': '',
                'content-length': responseBody.length,
            },
        };

        const request = https.request(options, (response) => {
            console.log(\`Status code: \${response.statusCode}\`);
            console.log(\`Status message: \${response.statusMessage}\`);
            response.on('end', () => {
                resolve();
            });
        });

        request.on('error', (error) => {
            console.log(\`send(..) failed executing https.request(..): \${error}\`);
            reject(error);
        });

        request.write(responseBody);
        request.end();
    });
}

async function Delete(params) {
    async function next() {
        const objects = await s3Client.send(new ListObjectVersionsCommand({
            Bucket: params.Bucket,
        }));
        const files = [...(objects.Versions || []), ...(objects.DeleteMarkers || [])];
        console.log("Files: ", files);

        const keys = files.map((file) => ({
            Key: file.Key,
            VersionId: file.VersionId,
        }));
        console.log('going to delete', keys);

        if (keys && keys.length > 0) {
            s3Client.send(new DeleteObjectsCommand({
                Bucket: params.Bucket,
                Delete: {
                    Objects: keys,
                },
            }));
            await next();
        }
    }
    await next();
}

exports.handler = async function (event, context) {
    console.log(JSON.stringify(event, null, 2));

    if (event.RequestType === 'Delete') {
        try {
            await Delete(event.ResourceProperties);
            await send(event, context, SUCCESS);
        } catch (e) {
            console.log(e);
            await send(event, context, FAILED);
        }
    } else {
        await send(event, context, SUCCESS);
    }
    context.done();
};
",
        },
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
          },
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CFNLambdaPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:ListBucketVersions",
                "s3:PutBucketNotification",
                "s3:PutObject",
                "s3:GetObject",
                "s3:GetObjectVersion",
                "s3:DeleteObject",
                "s3:DeleteObjectVersion",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::\${Bucket}*",
                },
              ],
              "Sid": "CFNLambdaS3Access",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "CFNLambdaRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
            {
              "id": "F3",
              "reason": "This role policy is required to have * action in its policy",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Ref": "CFNLambdaPolicy",
          },
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Clean": {
      "DependsOn": [
        "CFNLambdaPolicy",
        "HTTPSOnlyBucketPolicy",
      ],
      "Properties": {
        "Bucket": {
          "Ref": "Bucket",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Clean",
    },
    "HTTPSOnlyBucketPolicy": {
      "Properties": {
        "Bucket": {
          "Ref": "Bucket",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket",
                          "Arn",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "ReadPolicy": {
      "Condition": "Public",
      "Properties": {
        "Bucket": {
          "Ref": "Bucket",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:Get*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::\${Bucket}*",
                },
              ],
              "Sid": "PublicReadForGetBucketObjects",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "devBootStrapBucketAccessLogs": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W35",
              "reason": "Access logging is not required for this Bucket.",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "S3_BUCKET_NO_PUBLIC_RW_ACL",
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "devBootStrapBucketAccessLogsPolicy": {
      "DependsOn": "devBootStrapBucketAccessLogs",
      "Properties": {
        "Bucket": {
          "Ref": "devBootStrapBucketAccessLogs",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutObject",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": "arn:aws:s3:::*",
                },
                "Bool": {
                  "aws:SecureTransport": "true",
                },
                "StringEquals": {
                  "aws:SourceAccount": {
                    "Ref": "AWS::AccountId",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "logging.s3.amazonaws.com",
              },
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "devBootStrapBucketAccessLogs",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "devBootStrapBucketAccessLogs",
                          "Arn",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "Sid": "S3ServerAccessLogsPolicy",
            },
            {
              "Action": "*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "devBootStrapBucketAccessLogs",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "devBootStrapBucketAccessLogs",
                          "Arn",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
  },
}
`;
